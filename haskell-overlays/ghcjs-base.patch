unchanged:
--- a/Data/JSString.hs
+++ b/Data/JSString.hs
@@ -5,7 +5,7 @@
 {-| Manipulation of JavaScript strings, API and fusion implementation
     based on Data.Text by Tom Harper, Duncan Coutts, Bryan O'Sullivan e.a.
  -}
-module Data.JSString ( JSString
+module Data.JSString ( JSString(..)
 
                        -- * Creation and elimination
                      , pack
@@ -1863,7 +1863,7 @@ foreign import javascript unsafe
 foreign import javascript unsafe
   "h$jsstringUncheckedIndex" js_uncheckedIndex :: Int# -> JSString -> Int#
 foreign import javascript unsafe
-  "h$jsstringdIndexR" js_uncheckedIndexR :: Int# -> JSString -> Int#
+  "h$jsstringIndexR" js_uncheckedIndexR :: Int# -> JSString -> Int#
 
 -- js_head and js_last return -1 for empty string
 foreign import javascript unsafe
only in patch2:
unchanged:
--- a/jsbits/jsstring.js
+++ b/jsbits/jsstring.js
@@ -1137,16 +1137,15 @@ function h$jsstringReadValue64(str, start, negate) {
       h$jsstringLongs.push(goog.math.Long.fromInt(t));
     }
   }
-  var li = l-i;
-  if(li < 10 && !negate) {
+  if(l - i < 10 && !negate) {
     RETURN_UBX_TUP3(1, 0, parseInt(str.substr(i), 10));
   }
-  var r = goog.math.Long.fromInt(parseInt(str.substr(li,9),10));
-  li += 9;
-  while(li < l) {
-    r = r.multiply(h$jsstringLongs[Math.min(l-li-1,8)])
-         .add(goog.math.Long.fromInt(parseInt(str.substr(li,9), 10)));
-    li += 9;
+  var r = goog.math.Long.fromInt(parseInt(str.substr(i,9),10));
+  i += 9;
+  while(i < l) {
+    r = r.multiply(h$jsstringLongs[Math.min(l-i-1,8)])
+         .add(goog.math.Long.fromInt(parseInt(str.substr(i,9), 10)));
+    i += 9;
   }
   if(negate) {
     r = r.negate();
